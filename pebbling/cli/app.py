"""Pebble CLI - Command-line interface for managing Pebble agents.

This module provides the main CLI commands for initializing and managing
Pebble agents in a project. It handles project setup, configuration, and
authentication management.
"""

import importlib.util
import json
from pathlib import Path
from typing import Iterable
from dataclasses import dataclass, asdict

import subprocess
import sys
import typer
from rich.console import Console
from rich.panel import Panel

from .templates import HELLO_WORLD_AGENT_TEMPLATE


app = typer.Typer(help="Pebble CLI")
console = Console()


def _short_panel(title: str, body: str, style: str = "bold blue") -> None:
    """Display a formatted panel with a title and body text.

    Args:
        title: The title to display at the top of the panel.
        body: The main content to display inside the panel.
        style: Rich style string for panel formatting (default: "bold blue").
    """
    console.print(Panel.fit(body, title=title, style=style))


def ensure_gitignore_rules(project_root: Path, filepaths: Iterable[str]) -> None:
    """Ensure specified file paths are added to the project's .gitignore file.

    This function checks if a Pebble section exists in the .gitignore file
    and adds the specified filepaths if the section doesn't already exist.
    The function prevents duplicate sections from being created.

    Args:
        project_root: The root directory of the project containing .gitignore.
        filepaths: An iterable of file paths to add to .gitignore.

    Note:
        If the Pebble section already exists in .gitignore, no changes are made.
    """
    section_header = "# pebble autogenerated rules"
    gitignore_path = project_root / ".gitignore"

    file_text = ""
    if gitignore_path.exists():
        file_text = gitignore_path.read_text(encoding="utf-8")

    if section_header in file_text:
        console.print("[yellow]‚ÑπÔ∏è  Pebble rules already exist in .gitignore - skipping update[/yellow]")
        return

    block_lines = [section_header] + [filepath for filepath in filepaths]
    block = "\n".join(block_lines).strip() + "\n"

    with gitignore_path.open("a", encoding="utf-8") as file:
        if file_text and not file_text.endswith("\n"):
            file.write("\n")

        file.write(block)


@dataclass
class PebbleUserCredentials:
    """Data class for storing Pebble user authentication credentials.

    Attributes:
        email: User's email address for Pebble authentication.
        api_key: API key for authenticating with Pebble services.
    """

    email: str
    api_key: str


@app.command()
def init(
    colony: str = typer.Option(".pebble", "--config-dir", help="Pebble config directory"),
    nest: str = typer.Option("pebble_agent.py", "--agent-entry", help="File for your agent"),
    interactive: bool = typer.Option(True, "--yes", help="Use defaults; no prompts"),
):
    """Initialize Pebble in this project."""

    # Check if pebble is installed
    if importlib.util.find_spec("pebble") is None:
        console.print("[bold yellow]‚ö†Ô∏è Pebble package not found. Installing...[/bold yellow]")
        use_uv = (Path.cwd() / "uv.lock").exists() or (Path.cwd() / "pyproject.toml").exists()
        command = ["uv", "add", "pebble"] if use_uv else [sys.executable, "-m", "pip", "install", "pebble"]
        tool_name = "uv" if use_uv else "pip"
        try:
            subprocess.run(command, check=True)
            console.print("[bold green]‚úÖ Pebble installed successfully![/bold green]")
        except subprocess.CalledProcessError:
            console.print(f"[bold red]‚ùå Failed to install with {tool_name}. Please install manually.[/bold red]")

    credentials: PebbleUserCredentials | None = None
    match interactive:
        case False:
            pass
        case True:
            console.print("\n[bold cyan]üêß Welcome to Pebble! Let's set up your agent[/bold cyan]\n")

            colony = typer.prompt("üìÅ Config directory", default=colony)
            nest = typer.prompt("ü§ñ Agent file", default=nest)

            setup_auth = typer.confirm("üîê Configure authentication?", default=False)
            if setup_auth:
                email = typer.prompt("üìß Email")
                api_key = typer.prompt("üîë API Key", hide_input=True)

                credentials = PebbleUserCredentials(email=email, api_key=api_key)

    colony_directory = Path.cwd() / colony
    if colony_directory.exists():
        console.print(f"[bold red]‚ùå Directory {colony_directory} already exists[/bold red]")
        raise typer.Abort()

    colony_directory.mkdir()
    nest_file = Path.cwd() / nest
    if nest_file.exists():
        console.print(f"[bold red]‚ùå File for agent {nest_file} already exists[/bold red]")
        raise typer.Abort()

    nest_file.write_text(HELLO_WORLD_AGENT_TEMPLATE)

    credentials_json_file = colony_directory / "credentials.json"
    if credentials is not None:
        credentials_json_file.touch()

        credentials_json_file.write_text(json.dumps(asdict(credentials)))
        ensure_gitignore_rules(Path.cwd(), [str(credentials_json_file.relative_to(Path.cwd()))])

    config_file = colony_directory / "config.json"
    config_file.touch()

    project_root = Path.cwd()
    config_file.write_text(
        json.dumps(
            {
                "config": str(config_file.relative_to(project_root)),
                "auth": str(credentials_json_file.relative_to(project_root)) if credentials else None,
                "agent_entrypoint": str(nest_file.relative_to(project_root)),
            }
        )
    )

    _short_panel(
        "[bold green]‚úÖ Pebble initialized successfully![/bold green]",
        "[bold]üöÄ Ready! Next step: [cyan]`pebble launch`[/cyan][/bold]",
        style="bold green",
    )


if __name__ == "__main__":
    app()
