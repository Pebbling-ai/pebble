# generated by datamodel-codegen:
#   filename:  pebbling_protocol.json
#   timestamp: 2025-07-17T16:30:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class Role(Enum):
    agent = 'agent'
    user = 'user'


class RunMode(Enum):
    sync = 'sync'
    async_ = 'async'
    stream = 'stream'


class DebugLevel(Enum):
    integer_1 = 1
    integer_2 = 2


class IdentityVerificationMethod(Enum):
    did = 'did'
    agentdns = 'agentdns'
    certificate = 'certificate'


class AgentCapabilities(BaseModel):
    supported_operations: Optional[List[str]] = Field(
        [],
        description='Operations this agent can perform',
        title='Supported Operations',
    )
    input_content_types: Optional[List[str]] = Field(
        ['text/plain'],
        description='Content types this agent can accept',
        title='Input Content Types',
    )
    output_content_types: Optional[List[str]] = Field(
        ['text/plain'],
        description='Content types this agent can produce',
        title='Output Content Types',
    )
    supports_images: Optional[bool] = Field(
        False, description='Whether agent can process images', title='Supports Images'
    )
    supports_audio: Optional[bool] = Field(
        False, description='Whether agent can process audio', title='Supports Audio'
    )
    supports_video: Optional[bool] = Field(
        False, description='Whether agent can process video', title='Supports Video'
    )
    supports_binary: Optional[bool] = Field(
        False,
        description='Whether agent can process binary data',
        title='Supports Binary',
    )
    max_message_size_bytes: Optional[int] = Field(
        None,
        description='Maximum message size in bytes',
        title='Max Message Size Bytes',
    )
    streaming_supported: Optional[bool] = Field(
        False,
        description='Whether agent supports streaming responses',
        title='Streaming Supported',
    )


class AgentMetrics(BaseModel):
    total_requests: Optional[int] = Field(
        0, description='Total number of requests processed', title='Total Requests'
    )
    total_tokens: Optional[int] = Field(
        None, description='Total tokens processed', title='Total Tokens'
    )
    avg_response_time_ms: Optional[int] = Field(
        None,
        description='Average response time in milliseconds',
        title='Avg Response Time Ms',
    )
    error_rate: Optional[float] = Field(
        None, description='Error rate percentage', title='Error Rate'
    )
    uptime_seconds: Optional[int] = Field(
        None, description='Total uptime in seconds', title='Uptime Seconds'
    )
    last_active: Optional[int] = Field(
        None, description='UNIX timestamp of last activity', title='Last Active'
    )
    custom_metrics: Optional[Dict[str, Any]] = Field(
        None, description='Additional custom metrics', title='Custom Metrics'
    )


class MTLSConfiguration(BaseModel):
    endpoint: str = Field(
        ..., description='Secure mTLS agent endpoint.', title='Endpoint'
    )
    public_key: str = Field(
        ..., description="Agent's public key for mTLS.", title='Public Key'
    )
    certificate_chain: Optional[List[str]] = Field(
        None, description='Certificate chain for validation.', title='Certificate Chain'
    )
    certificate_expiry: Optional[int] = Field(
        None,
        description='UNIX timestamp when certificate expires.',
        title='Certificate Expiry',
    )
    key_rotation_policy: Optional[str] = Field(
        None,
        description="Policy for key rotation, e.g. 'quarterly'",
        title='Key Rotation Policy',
    )
    cipher_suites: Optional[List[str]] = Field(
        None,
        description='Allowed cipher suites for TLS connection.',
        title='Cipher Suites',
    )
    min_tls_version: Optional[str] = Field(
        '1.2', description='Minimum TLS version required.', title='Min Tls Version'
    )


class IdentityProvider(Enum):
    keycloak = 'keycloak'
    azure_ad = 'azure_ad'
    okta = 'okta'
    auth0 = 'auth0'
    custom = 'custom'


class TrustLevel(Enum):
    untrusted = 'untrusted'
    minimal = 'minimal'
    low = 'low'
    standard = 'standard'
    medium = 'medium'
    high = 'high'
    elevated = 'elevated'
    critical = 'critical'
    super_critical = 'super-critical'
    emergency = 'emergency'


class TrustCategory(Enum):
    identity = 'identity'
    authentication = 'authentication'
    authorization = 'authorization'
    data_access = 'data_access'
    financial = 'financial'
    healthcare = 'healthcare'
    personal = 'personal'
    admin = 'admin'
    system = 'system'
    communication = 'communication'
    regulatory = 'regulatory'


class TrustVerificationMethod(Enum):
    certificate = 'certificate'
    oauth = 'oauth'
    did = 'did'
    mtls = 'mtls'
    jwt = 'jwt'
    multi_party = 'multi_party'
    biometric = 'biometric'
    zero_knowledge = 'zero_knowledge'
    multi_factor = 'multi_factor'


class TrustVerificationResult(BaseModel):
    verified: bool = Field(
        ..., description='Whether trust verification succeeded', title='Verified'
    )
    trust_level: TrustLevel = Field(..., description='The verified trust level')
    allowed_operations: Optional[List[str]] = Field(
        [],
        description='Operations allowed with the verified trust level',
        title='Allowed Operations',
    )
    denied_operations: Optional[List[str]] = Field(
        [],
        description='Operations denied due to insufficient trust level',
        title='Denied Operations',
    )
    verification_timestamp: str = Field(
        ...,
        description='ISO-8601 timestamp of the verification',
        examples=['2023-10-27T10:00:00Z'],
        title='Verification Timestamp',
    )
    verification_token: Optional[str] = Field(
        None,
        description='Token for subsequent operations',
        examples=['abc123'],
        title='Verification Token',
    )
    token_expiry: Optional[str] = Field(
        None,
        description='ISO-8601 timestamp when the verification token expires',
        examples=['2023-10-27T10:00:00Z'],
        title='Token Expiry',
    )


class TrustVerificationParams(BaseModel):
    agent_id: Union[UUID, int, str] = Field(
        ..., description='ID of the agent requesting verification', title='Agent Id'
    )
    target_agent_id: Union[UUID, int, str] = Field(
        ...,
        description='ID of the target agent to interact with',
        title='Target Agent Id',
    )
    operations: Optional[List[str]] = Field(
        [], description='Operations the agent wants to perform', title='Operations'
    )
    certificate: Optional[str] = Field(
        None, description="Agent's certificate for verification", title='Certificate'
    )
    metadata: Optional[Dict[str, Any]] = Field(
        {}, description='Additional verification metadata', title='Metadata'
    )


class MessageSendConfiguration(BaseModel):
    acceptedOutputModes: List[str] = Field(..., title='Acceptedoutputmodes')
    blocking: Optional[bool] = Field(None, title='Blocking')
    historyLength: Optional[int] = Field(None, title='Historylength')


class TextPart(BaseModel):
    kind: str = Field('text', const=True, title='Kind')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    content: str = Field(..., title='Content')


class DataPart(BaseModel):
    kind: str = Field('data', const=True, title='Kind')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    content: str = Field(..., title='Content')
    data: Dict[str, Any] = Field(..., title='Data')


class FileWithBytes(BaseModel):
    bytes: str = Field(..., title='Bytes')
    mimeType: Optional[str] = Field(None, title='Mimetype')
    name: Optional[str] = Field(None, title='Name')


class FileWithUri(BaseModel):
    bytes: str = Field(..., title='Bytes')
    mimeType: Optional[str] = Field(None, title='Mimetype')
    name: Optional[str] = Field(None, title='Name')
    uri: str = Field(..., title='Uri')


class TaskState(Enum):
    submitted = 'submitted'
    working = 'working'
    input_required = 'input-required'
    completed = 'completed'
    canceled = 'canceled'
    failed = 'failed'
    rejected = 'rejected'
    auth_required = 'auth-required'
    unknown = 'unknown'
    trust_verification_required = 'trust-verification-required'


class TaskIdParams(BaseModel):
    id: UUID = Field(..., title='Id')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')


class NegotiationStatus(Enum):
    proposed = 'proposed'
    accepted = 'accepted'
    rejected = 'rejected'
    countered = 'countered'


class NegotiationSessionStatus(Enum):
    initiated = 'initiated'
    ongoing = 'ongoing'
    completed = 'completed'
    rejected = 'rejected'


class NegotiationProposal(BaseModel):
    proposal_id: UUID = Field(
        ..., description='Unique ID of this specific proposal', title='Proposal Id'
    )
    from_agent: UUID = Field(
        ..., description='Agent ID initiating the proposal', title='From Agent'
    )
    to_agent: UUID = Field(
        ..., description='Agent ID receiving the proposal', title='To Agent'
    )
    terms: Dict[str, Any] = Field(
        ..., description='Negotiation terms (structured)', title='Terms'
    )
    timestamp: str = Field(
        ...,
        description='ISO-8601 timestamp when the proposal was made',
        examples=['2023-10-27T10:00:00Z'],
        title='Timestamp',
    )
    status: Optional[NegotiationStatus] = Field(
        'proposed', description='Status of this specific proposal'
    )


class NegotiationSession(BaseModel):
    session_id: UUID = Field(
        ...,
        description='Unique identifier for the negotiation session',
        title='Session Id',
    )
    status: Optional[NegotiationSessionStatus] = Field(
        'initiated', description='Current status of the negotiation'
    )
    participants: List[UUID] = Field(
        ..., description='List of participating agent IDs', title='Participants'
    )
    proposals: Optional[List[NegotiationProposal]] = Field(
        [], description='Array of negotiation proposals exchanged', title='Proposals'
    )


class PaymentActionType(Enum):
    submit = 'submit'
    cancel = 'cancel'
    refund = 'refund'
    verify = 'verify'
    unknown = 'unknown'


class PaymentStatus(Enum):
    pending = 'pending'
    processing = 'processing'
    completed = 'completed'
    failed = 'failed'
    refunded = 'refunded'
    cancelled = 'cancelled'
    disputed = 'disputed'


class PaymentMethod(Enum):
    credit_card = 'credit_card'
    debit_card = 'debit_card'
    ach = 'ach'
    wire_transfer = 'wire_transfer'
    crypto = 'crypto'
    sepa = 'sepa'
    paypal = 'paypal'
    other = 'other'


class BillingPeriod(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    yearly = 'yearly'
    one_time = 'one-time'


class PaymentAction(BaseModel):
    action_type: Optional[PaymentActionType] = Field(
        'submit', description='Type of payment action'
    )
    amount: float = Field(
        ..., description='The amount of the payment', examples=[10.0], title='Amount'
    )
    currency: str = Field(
        ...,
        description='ISO currency code clearly identified (e.g., USD)',
        title='Currency',
    )
    billing_period: Optional[BillingPeriod] = Field(
        'one-time',
        description='Billing frequency clearly defined if subscription-based',
    )
    transaction_id: Optional[str] = Field(
        None, description='Unique transaction identifier', title='Transaction Id'
    )
    payment_method: Optional[PaymentMethod] = Field(
        None, description='Method of payment'
    )
    payment_status: Optional[PaymentStatus] = Field(
        None, description='Current status of the payment'
    )
    created_timestamp: Optional[str] = Field(
        None,
        description='ISO-8601 timestamp when payment was created',
        examples=['2023-10-27T10:00:00Z'],
        title='Created Timestamp',
    )
    processed_timestamp: Optional[str] = Field(
        None,
        description='ISO-8601 timestamp when payment was processed',
        examples=['2023-10-27T10:00:00Z'],
        title='Processed Timestamp',
    )
    payer_id: Optional[Union[UUID, str]] = Field(
        None, description='ID of the paying entity', title='Payer Id'
    )
    payee_id: Optional[Union[UUID, str]] = Field(
        None, description='ID of the receiving entity', title='Payee Id'
    )
    reference: Optional[str] = Field(
        None, description='Payment reference or memo', title='Reference'
    )
    regulatory_info: Optional[Dict[str, Any]] = Field(
        None,
        description='Regulatory information for compliance',
        title='Regulatory Info',
    )


class JSONRPCError(BaseModel):
    code: int = Field(..., title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field(..., title='Message')


class GetTaskRequest(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    method: str = Field('tasks/get', const=True, title='Method')
    params: TaskIdParams


class CancelTaskRequest(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    method: str = Field('tasks/cancel', const=True, title='Method')
    params: TaskIdParams


class TaskResubscriptionRequest(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    method: str = Field('tasks/resubscribe', const=True, title='Method')
    params: TaskIdParams


class JSONParseError(BaseModel):
    code: int = Field(-32700, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Invalid JSON', const=True, title='Message')


class InvalidRequestError(BaseModel):
    code: int = Field(-32600, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Validation error', const=True, title='Message')


class MethodNotFoundError(BaseModel):
    code: int = Field(-32601, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Method not found', const=True, title='Message')


class InvalidParamsError(BaseModel):
    code: int = Field(-32602, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Invalid parameters', const=True, title='Message')


class InternalError(BaseModel):
    code: int = Field(-32603, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Internal error', const=True, title='Message')


class TaskNotFoundError(BaseModel):
    code: int = Field(-32007, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Task not found', const=True, title='Message')


class TaskNotCancelableError(BaseModel):
    code: int = Field(-32008, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Task not cancelable', const=True, title='Message')


class PushNotificationNotSupportedError(BaseModel):
    code: int = Field(-32009, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Push notification not supported', const=True, title='Message')


class UnsupportedOperationError(BaseModel):
    code: int = Field(-32010, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Unsupported operation', const=True, title='Message')


class ContentTypeNotSupportedError(BaseModel):
    code: int = Field(-32011, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Content type not supported', const=True, title='Message')


class InvalidAgentResponseError(BaseModel):
    code: int = Field(-32006, const=True, title='Code')
    data: Any = Field(None, title='Data')
    message: str = Field('Invalid agent response', const=True, title='Message')


class AgentIdentity(BaseModel):
    did: Optional[str] = Field(
        None,
        description='Agent DID for decentralized identity (URI format).',
        title='Did',
    )
    did_document: Optional[Dict[str, Any]] = Field(
        None,
        description='Complete DID document containing verification methods, services, etc.',
        title='Did Document',
    )
    did_resolution_metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Metadata from DID resolution process.',
        title='Did Resolution Metadata',
    )
    agentdns_url: Optional[str] = Field(
        None,
        description='Agent DNS-based identity URL (agentdns.ai).',
        title='Agentdns Url',
    )
    endpoint: str = Field(
        ..., description='Secure mTLS agent endpoint.', title='Endpoint'
    )
    mtls_config: MTLSConfiguration = Field(
        ..., description='mTLS configuration for agent.'
    )
    identity_verification_method: Optional[IdentityVerificationMethod] = Field(
        'certificate',
        description='Primary method for identity verification.',
        title='Identity Verification Method',
    )


class KeycloakRole(BaseModel):
    role_id: UUID = Field(
        ..., description='Role ID from Keycloak IAM.', title='Role Id'
    )
    role_name: str = Field(
        ..., description='Human-readable role name.', title='Role Name'
    )
    permissions: Optional[List[str]] = Field(
        [], description='Specific permissions tied to this role.', title='Permissions'
    )
    trust_level: Optional[TrustLevel] = Field(
        'medium', description='Default trust level for this role'
    )
    realm_name: str = Field(
        ..., description='The Keycloak realm this role belongs to.', title='Realm Name'
    )
    external_mappings: Optional[Dict[str, str]] = Field(
        None,
        description='Mappings to equivalent roles in other identity systems',
        title='External Mappings',
    )
    operation_permissions: Optional[Dict[str, TrustLevel]] = Field(
        None,
        description="Operation-specific trust requirements, e.g., {'update_customer': 'high'}",
        title='Operation Permissions',
    )


class TrustVerificationRequest(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    method: str = Field('trust/verify', const=True, title='Method')
    params: TrustVerificationParams


class TrustVerificationResponse(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    result: TrustVerificationResult


class FilePart(BaseModel):
    kind: str = Field('file', const=True, title='Kind')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    content: str = Field(..., title='Content')
    file: Union[FileWithBytes, FileWithUri] = Field(..., title='File')


class JSONRPCErrorResponse(BaseModel):
    error: Union[
        JSONRPCError,
        JSONParseError,
        InvalidRequestError,
        MethodNotFoundError,
        InvalidParamsError,
        InternalError,
        TaskNotFoundError,
        TaskNotCancelableError,
        PushNotificationNotSupportedError,
        UnsupportedOperationError,
        ContentTypeNotSupportedError,
        InvalidAgentResponseError,
    ] = Field(..., title='Error')
    id: Optional[Union[str, int]] = Field(None, title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')


class AgentTrust(BaseModel):
    identity_provider: IdentityProvider = Field(
        ..., description='Identity provider used for authentication'
    )
    inherited_roles: Optional[List[KeycloakRole]] = Field(
        [],
        description="Roles inherited from the agent's creator",
        title='Inherited Roles',
    )
    certificate: Optional[str] = Field(
        None,
        description="Agent's security certificate for verification",
        title='Certificate',
    )
    certificate_fingerprint: Optional[str] = Field(
        None,
        description="Fingerprint of the agent's certificate",
        title='Certificate Fingerprint',
    )
    creator_id: Union[UUID, int, str] = Field(
        ..., description='ID of the user who created this agent', title='Creator Id'
    )
    creation_timestamp: str = Field(
        ...,
        description='ISO-8601 timestamp of agent creation',
        examples=['2023-10-27T10:00:00Z'],
        title='Creation Timestamp',
    )
    trust_verification_required: Optional[bool] = Field(
        True,
        description='Whether trust verification is required',
        title='Trust Verification Required',
    )
    allowed_operations: Optional[Dict[str, TrustLevel]] = Field(
        {},
        description='Operations this agent is allowed to perform with required trust levels',
        title='Allowed Operations',
    )


class Part(BaseModel):
    __root__: Union[TextPart, FilePart, DataPart] = Field(
        ..., description='Union type for all possible message parts', title='Part'
    )


class Artifact(BaseModel):
    artifact_id: UUID = Field(
        ..., description='Unique identifier for the artifact', title='Artifact Id'
    )
    name: Optional[str] = Field(None, title='Name')
    description: Optional[str] = Field(None, title='Description')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    parts: List[Part] = Field(..., title='Parts')


class TaskArtifactUpdateEvent(BaseModel):
    append: Optional[bool] = Field(None, title='Append')
    artifact: Artifact
    contextId: UUID = Field(..., title='Contextid')
    kind: str = Field('artifact-update', const=True, title='Kind')
    lastChunk: Optional[bool] = Field(None, title='Lastchunk')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    taskId: UUID = Field(..., title='Taskid')


class AgentManifest(BaseModel):
    agnt_id: Union[UUID, int, str] = Field(
        ...,
        description='The unique identifier of the agent',
        examples=['123e4567-e89b-12d3-a456-426614174000'],
        title='Agnt Id',
    )
    name: str = Field(
        ...,
        description='The name of the agent',
        examples=['Japanese Restaurant Reviewer Agent'],
        title='Name',
    )
    description: Optional[str] = Field(
        None,
        description="Detailed description of the agent's purpose and capabilities",
        title='Description',
    )
    user_id: Union[UUID, int, str] = Field(..., description='user', title='User Id')
    identity: AgentIdentity = Field(..., description='Agent identity information.')
    trust_config: Optional[AgentTrust] = Field(
        None, description='Trust configuration and inherited permissions'
    )
    capabilities: Optional[AgentCapabilities] = Field(
        None, description="Agent's capabilities and supported operations"
    )
    metrics: Optional[AgentMetrics] = Field(
        None, description='Agent usage and performance metrics'
    )
    num_history_sessions: Optional[int] = Field(None, title='Num History Sessions')
    storage: Optional[Dict[str, Any]] = Field(None, title='Storage')
    context: Optional[Dict[str, Any]] = Field(None, title='Context')
    extra_data: Optional[Dict[str, Any]] = Field(None, title='Extra Data')
    stream: Optional[bool] = Field(None, title='Stream')
    debug_mode: Optional[bool] = Field(False, title='Debug Mode')
    debug_level: Optional[DebugLevel] = Field(1, title='Debug Level')
    monitoring: Optional[bool] = Field(False, title='Monitoring')
    telemetry: Optional[bool] = Field(True, title='Telemetry')
    version: str = Field(..., examples=['1.0.0'], title='Version')


class Message(BaseModel):
    contextId: UUID = Field(..., title='Contextid')
    kind: str = Field('message', const=True, title='Kind')
    messageId: UUID = Field(..., title='Messageid')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    parts: List[Part] = Field(..., title='Parts')
    role: Role
    extra_data: Optional[Dict[str, Any]] = Field(None, title='Extra Data')


class MessageSendParams(BaseModel):
    configuration: Optional[MessageSendConfiguration] = None
    message: Message
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')


class TaskStatus(BaseModel):
    message: Optional[Message] = None
    state: TaskState
    timestamp: Optional[str] = Field(
        None,
        description='ISO-8601 timestamp of the task status update',
        examples=['2023-10-27T10:00:00Z'],
        title='Timestamp',
    )


class TaskStatusUpdateEvent(BaseModel):
    contextId: UUID = Field(..., title='Contextid')
    final: bool = Field(..., title='Final')
    kind: str = Field('status-update', const=True, title='Kind')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    status: TaskStatus
    taskId: UUID = Field(..., title='Taskid')


class SendMessageRequest(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    method: str = Field('message/send', const=True, title='Method')
    params: MessageSendParams


class SendStreamingMessageRequest(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    method: str = Field('message/stream', const=True, title='Method')
    params: MessageSendParams


class Task(BaseModel):
    artifacts: Optional[List[Artifact]] = Field(None, title='Artifacts')
    contextId: UUID = Field(..., title='Contextid')
    history: Optional[List[Message]] = Field(None, title='History')
    id: str = Field(..., title='Id')
    kind: str = Field('task', const=True, title='Kind')
    metadata: Optional[Dict[str, Any]] = Field(None, title='Metadata')
    status: TaskStatus


class SendMessageSuccessResponse(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    result: Union[Task, Message] = Field(..., title='Result')


class SendStreamingMessageSuccessResponse(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    result: Union[Task, Message, TaskStatusUpdateEvent, TaskArtifactUpdateEvent] = (
        Field(..., title='Result')
    )


class GetTaskSuccessResponse(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    result: Task


class CancelTaskSuccessResponse(BaseModel):
    id: UUID = Field(..., title='Id')
    jsonrpc: str = Field('2.0', const=True, title='Jsonrpc')
    result: Task


class JSONRPCResponse(BaseModel):
    __root__: Union[
        JSONRPCErrorResponse,
        SendMessageSuccessResponse,
        SendStreamingMessageSuccessResponse,
        GetTaskSuccessResponse,
        CancelTaskSuccessResponse,
        TrustVerificationResponse,
    ] = Field(
        ...,
        description='Union type for all JSON-RPC responses',
        title='JSONRPCResponse',
    )


class PebblingProtocol(BaseModel):
    Role: Optional[Role] = None
    RunMode: Optional[RunMode] = None
    AgentManifest: Optional[AgentManifest] = None
    AgentIdentity: Optional[AgentIdentity] = None
    AgentCapabilities: Optional[AgentCapabilities] = None
    AgentMetrics: Optional[AgentMetrics] = None
    AgentTrust: Optional[AgentTrust] = None
    MTLSConfiguration: Optional[MTLSConfiguration] = None
    IdentityProvider: Optional[IdentityProvider] = None
    KeycloakRole: Optional[KeycloakRole] = None
    TrustLevel: Optional[TrustLevel] = None
    TrustCategory: Optional[TrustCategory] = None
    TrustVerificationMethod: Optional[TrustVerificationMethod] = None
    TrustVerificationRequest: Optional[TrustVerificationRequest] = None
    TrustVerificationResponse: Optional[TrustVerificationResponse] = None
    TrustVerificationResult: Optional[TrustVerificationResult] = None
    TrustVerificationParams: Optional[TrustVerificationParams] = None
    Message: Optional[Message] = None
    MessageSendConfiguration: Optional[MessageSendConfiguration] = None
    MessageSendParams: Optional[MessageSendParams] = None
    Part: Optional[Part] = None
    TextPart: Optional[TextPart] = None
    FilePart: Optional[FilePart] = None
    DataPart: Optional[DataPart] = None
    FileWithBytes: Optional[FileWithBytes] = None
    FileWithUri: Optional[FileWithUri] = None
    Task: Optional[Task] = None
    TaskState: Optional[TaskState] = None
    TaskStatus: Optional[TaskStatus] = None
    Artifact: Optional[Artifact] = None
    TaskIdParams: Optional[TaskIdParams] = None
    TaskStatusUpdateEvent: Optional[TaskStatusUpdateEvent] = None
    TaskArtifactUpdateEvent: Optional[TaskArtifactUpdateEvent] = None
    NegotiationStatus: Optional[NegotiationStatus] = None
    NegotiationSessionStatus: Optional[NegotiationSessionStatus] = None
    NegotiationProposal: Optional[NegotiationProposal] = None
    NegotiationSession: Optional[NegotiationSession] = None
    PaymentActionType: Optional[PaymentActionType] = None
    PaymentStatus: Optional[PaymentStatus] = None
    PaymentMethod: Optional[PaymentMethod] = None
    BillingPeriod: Optional[BillingPeriod] = None
    PaymentAction: Optional[PaymentAction] = None
    JSONRPCError: Optional[JSONRPCError] = None
    JSONRPCErrorResponse: Optional[JSONRPCErrorResponse] = None
    JSONRPCResponse: Optional[JSONRPCResponse] = None
    SendMessageRequest: Optional[SendMessageRequest] = None
    SendStreamingMessageRequest: Optional[SendStreamingMessageRequest] = None
    GetTaskRequest: Optional[GetTaskRequest] = None
    CancelTaskRequest: Optional[CancelTaskRequest] = None
    TaskResubscriptionRequest: Optional[TaskResubscriptionRequest] = None
    SendMessageSuccessResponse: Optional[SendMessageSuccessResponse] = None
    SendStreamingMessageSuccessResponse: Optional[
        SendStreamingMessageSuccessResponse
    ] = None
    GetTaskSuccessResponse: Optional[GetTaskSuccessResponse] = None
    CancelTaskSuccessResponse: Optional[CancelTaskSuccessResponse] = None
    JSONParseError: Optional[JSONParseError] = None
    InvalidRequestError: Optional[InvalidRequestError] = None
    MethodNotFoundError: Optional[MethodNotFoundError] = None
    InvalidParamsError: Optional[InvalidParamsError] = None
    InternalError: Optional[InternalError] = None
    TaskNotFoundError: Optional[TaskNotFoundError] = None
    TaskNotCancelableError: Optional[TaskNotCancelableError] = None
    PushNotificationNotSupportedError: Optional[PushNotificationNotSupportedError] = (
        None
    )
    UnsupportedOperationError: Optional[UnsupportedOperationError] = None
    ContentTypeNotSupportedError: Optional[ContentTypeNotSupportedError] = None
    InvalidAgentResponseError: Optional[InvalidAgentResponseError] = None
