#!/usr/bin/env python
"""
Deploy the {{project_slug}} pebble to Kubernetes using Helm.
"""

import os
import subprocess
import sys

def run_command(command, check=True):
    """
    Run a command and return its output.
    """
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=check, 
            text=True, 
            capture_output=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {command}")
        print(f"Error message: {e.stderr}")
        if check:
            sys.exit(1)
        return None

def check_helm_installed():
    """
    Check if Helm is installed.
    """
    try:
        run_command("helm version --short")
        return True
    except:
        return False

def check_kubectl_installed():
    """
    Check if kubectl is installed.
    """
    try:
        run_command("kubectl version --client --short")
        return True
    except:
        return False

def deploy_to_kubernetes():
    """
    Deploy the application to Kubernetes using Helm.
    """
    # Check if a Kubernetes context is set
    print("Checking Kubernetes connection...")
    result = run_command("kubectl config current-context", check=False)
    if not result:
        print("No Kubernetes context found. Please set up your Kubernetes environment.")
        sys.exit(1)
    
    print(f"Deploying to Kubernetes context: {result}")
    
    # Install or upgrade the Helm chart
    project_dir = os.path.basename(os.getcwd())
    helm_chart_path = os.path.join(os.getcwd(), "helm", project_dir)
    
    print(f"Deploying Helm chart from {helm_chart_path}")
    run_command(f"helm upgrade --install {project_dir} {helm_chart_path}")
    
    # Wait for deployment to be ready
    print("Waiting for deployment to be ready...")
    run_command(f"kubectl rollout status deployment {project_dir}")
    
    # Get service information
    print("\nAccess your application:")
    service_info = run_command(f"kubectl get svc {project_dir} -o jsonpath='{{.spec.type}} {{.spec.ports[0].port}} {{.spec.ports[0].targetPort}}'").split()
    
    if service_info[0] == "LoadBalancer":
        print("Waiting for LoadBalancer IP/hostname...")
        external_ip = run_command(f"kubectl get svc {project_dir} -o jsonpath='{{.status.loadBalancer.ingress[0].ip}}{{.status.loadBalancer.ingress[0].hostname}}'", check=False)
        if external_ip:
            print(f"Application available at: http://{external_ip}:{service_info[1]}")
        else:
            print("LoadBalancer IP/hostname not yet available. Check with: kubectl get svc")
    elif service_info[0] == "NodePort":
        node_port = run_command(f"kubectl get svc {project_dir} -o jsonpath='{{.spec.ports[0].nodePort}}'") 
        print(f"Application available at: http://CLUSTER_IP:{node_port}")
    else:  # ClusterIP
        print(f"For ClusterIP services, use port-forwarding to access the service:")
        print(f"kubectl port-forward svc/{project_dir} {service_info[1]}:{service_info[1]}")
        print(f"Then access your application at: http://localhost:{service_info[1]}")

def main():
    """
    Main entry point.
    """
    print("=== Kubernetes Deployment Tool ===\n")
    
    # Check prerequisites
    if not check_helm_installed():
        print("Helm is not installed. Please install Helm: https://helm.sh/docs/intro/install/")
        sys.exit(1)
    
    if not check_kubectl_installed():
        print("kubectl is not installed. Please install kubectl: https://kubernetes.io/docs/tasks/tools/")
        sys.exit(1)
    
    # Deploy
    deploy_to_kubernetes()
    
    print("\nDeployment complete!")

if __name__ == "__main__":
    main()
