"""
Docker deployment for Pebble agents.

This module provides functionality to create Docker deployment artifacts.
"""
import os
import shutil
import pkg_resources
import logging
import subprocess
from typing import List, Dict, Any

from pebble.core.protocol import AgentProtocol
from pebble.schemas.models import DeploymentConfig

logger = logging.getLogger("pebble.deployment")

def create_docker_deployment(
    adapters: List[AgentProtocol],
    config: DeploymentConfig
) -> str:
    """Create Docker deployment artifacts for containerized hosting.
    
    Args:
        adapters: The agent protocol adapters
        config: Deployment configuration
        
    Returns:
        str: Path to the Docker artifacts
    """
    if not config.docker_config:
        raise ValueError("Docker configuration is required")
        
    docker_config = config.docker_config
    output_dir = os.path.abspath(docker_config.output_dir)
    
    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Create app.py for the Docker container
    _create_app_file(adapters, config, output_dir)
    
    # Create Dockerfile
    _create_dockerfile(config, output_dir)
    
    # Create requirements.txt
    if docker_config.include_requirements:
        _create_requirements_file(output_dir)
    
    # Create docker-compose.yml
    _create_docker_compose(config, output_dir)
    
    # Create start script
    _create_start_script(output_dir)
    
    logger.info(f"Docker deployment artifacts created at {output_dir}")
    return output_dir

def _create_app_file(adapters, config, output_dir):
    """Create the main application file for Docker."""
    with open(os.path.join(output_dir, "app.py"), "w") as f:
        f.write("""#!/usr/bin/env python
\"\"\"
Pebble Docker Application
\"\"\"
import os
import sys
import pickle
import base64
from fastapi import FastAPI

# Import pebble components
from pebble.api.server import create_app, start_server
from pebble.schemas.models import DeploymentConfig

# Load the adapters and config from pickled data
with open("adapters.pickle", "rb") as f:
    adapters = pickle.load(f)

# Create config from environment variables
config = DeploymentConfig(
    host="0.0.0.0",  # Always bind to all interfaces in Docker
    port=int(os.environ.get("PORT", "8000")),
    cors_origins=os.environ.get("CORS_ORIGINS", "*").split(","),
    enable_docs=os.environ.get("ENABLE_DOCS", "true").lower() == "true",
    require_auth=os.environ.get("REQUIRE_AUTH", "true").lower() == "true",
)

# Create and start the app
if __name__ == "__main__":
    primary_adapter = adapters[0]
    additional_adapters = adapters[1:] if len(adapters) > 1 else None
    
    app = create_app(
        adapter=primary_adapter, 
        config=config,
        additional_adapters=additional_adapters
    )
    
    start_server(app=app, config=config)
""")

    # Pickle the adapters for loading in Docker
    import pickle
    with open(os.path.join(output_dir, "adapters.pickle"), "wb") as f:
        pickle.dump(adapters, f)

def _create_dockerfile(config, output_dir):
    """Create a Dockerfile."""
    docker_config = config.docker_config
    with open(os.path.join(output_dir, "Dockerfile"), "w") as f:
        f.write(f"""FROM {docker_config.base_image}

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Set environment variables
ENV PORT={docker_config.expose_port}
ENV PYTHONUNBUFFERED=1
""")

        # Add any custom environment variables
        if docker_config.environment_vars:
            for key, value in docker_config.environment_vars.items():
                f.write(f"ENV {key}={value}\n")

        # Add final commands
        f.write("""
# Make scripts executable
RUN chmod +x /app/start.sh /app/app.py

# Expose the port
EXPOSE $PORT

# Set the entrypoint
ENTRYPOINT ["/app/start.sh"]
""")

def _create_requirements_file(output_dir):
    """Create a requirements.txt file."""
    # Get pebble package requirements
    with open(os.path.join(output_dir, "requirements.txt"), "w") as f:
        f.write("# Core requirements\n")
        f.write("pebble>=0.1.0\n")
        f.write("fastapi>=0.68.0\n")
        f.write("uvicorn>=0.15.0\n")
        f.write("httpx>=0.21.0\n")
        
        # Add additional dependencies that might be needed
        f.write("\n# Agent framework requirements\n")
        f.write("# Uncomment the frameworks you're using\n")
        f.write("# agno>=0.1.0\n")
        f.write("# crewai>=0.1.0\n")
        f.write("# langchain>=0.1.0\n")
        f.write("# llama-index>=0.1.0\n")

def _create_docker_compose(config, output_dir):
    """Create a docker-compose.yml file."""
    docker_config = config.docker_config
    with open(os.path.join(output_dir, "docker-compose.yml"), "w") as f:
        f.write(f"""version: '3'

services:
  pebble:
    build: .
    ports:
      - "{docker_config.expose_port}:{docker_config.expose_port}"
    environment:
      - PORT={docker_config.expose_port}
      - ENABLE_DOCS=true
      - REQUIRE_AUTH=true
      - CORS_ORIGINS=*
""")
        # Add any custom environment variables
        if docker_config.environment_vars:
            for key, value in docker_config.environment_vars.items():
                f.write(f"      - {key}={value}\n")

def _create_start_script(output_dir):
    """Create a start script for the Docker container."""
    with open(os.path.join(output_dir, "start.sh"), "w") as f:
        f.write("""#!/bin/bash
# Start the Pebble application
exec python /app/app.py
""")