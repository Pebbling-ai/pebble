"""
Logging configuration for Pebble.
"""
import logging
import logging.config
import os
import json
from typing import Dict, Optional, Union

# Default logging configuration with different handlers
DEFAULT_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        },
        "json": {
            "format": "%(message)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "standard",
            "stream": "ext://sys.stdout"
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "DEBUG",
            "formatter": "json",
            "filename": "pebble.log",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 10
        }
    },
    "loggers": {
        "pebble": {
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False
        },
        "pebble.api": {
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False
        },
        "pebble.adapters": {
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False
        }
    }
}

def configure_logging(config: Optional[Union[Dict, str]] = None, log_level: str = "INFO") -> None:
    """Configure logging for the Pebble package.
    
    Args:
        config: Logging configuration dict or path to JSON file
        log_level: Default log level to use
    """
    # If config is a string, try to load JSON file
    if isinstance(config, str) and os.path.isfile(config):
        with open(config, 'r') as f:
            config = json.load(f)
    
    # If no config, use default
    if not config:
        config = DEFAULT_CONFIG
        
    # Update log levels if specified
    if log_level:
        config["handlers"]["console"]["level"] = log_level
        config["loggers"]["pebble"]["level"] = log_level
    
    # Apply configuration
    logging.config.dictConfig(config)
    
    # Return root logger for pebble
    return logging.getLogger("pebble")